// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model Admin {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  userName  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id          String           @id @unique @default(uuid())
  firstName   String
  lastName    String
  email       String           @unique
  phone       String?
  password    String
  dateOfBirth String?
  gender      Gender?
  complete    Boolean          @default(false)
  reset       RestPasswordOTP?
  image       Image?
  travels     Travel[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Wilaya {
  id          String        @id @unique @default(uuid())
  name        String        @unique
  description String?
  images      Image[]
  Hotel       Hotel[]
  Destination Destination[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Destination {
  id          String       @id @unique @default(uuid())
  name        String
  description String?
  wilaya      Wilaya       @relation(fields: [wilayaId], references: [id])
  wilayaId    String
  mapLocation MapLocation?
  images      Image[]
  ratings     Rating[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Hotel {
  id          String       @id @unique @default(uuid())
  name        String
  description String?
  type        String?
  address     String?
  wilaya      Wilaya?      @relation(fields: [wilayaId], references: [id])
  wilayaId    String?
  images      Image[]
  ratings     Rating[]
  mapLocation MapLocation?
  contactInfo ContactInfo?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Travel {
  id             String       @id @unique @default(uuid())
  name           String
  type           String
  description    String?
  destination    String
  longitude      String
  dateDepart     String
  dateArrive     String
  numberPerson   String
  availablePlace String
  gender         String?
  ageRange       String?
  price          String
  transportType  String
  images         Image[]
  ratings        Rating[]
  mapLocation    MapLocation?
  contactInfo    ContactInfo?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  User           User?        @relation(fields: [userId], references: [id])
  userId         String?
}

model RestPasswordOTP {
  id        String   @id @unique @default(uuid())
  codePIN   Int      @unique
  canChange Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)
}

enum Gender {
  Male
  Female
}

model Image {
  id            String       @id @unique @default(uuid())
  url           String
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?      @unique
  Wilaya        Wilaya?      @relation(fields: [wilayaId], references: [id], onDelete: Cascade)
  wilayaId      String?
  Hotel         Hotel?       @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId       String?
  Destination   Destination? @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId String?
  Travel        Travel?      @relation(fields: [travelId], references: [id], onDelete: Cascade)
  travelId      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model MapLocation {
  id            String       @id @unique @default(uuid())
  longitude     Float
  latitude      Float
  hotel         Hotel?       @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId       String?      @unique
  destination   Destination? @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId String?      @unique
  travel        Travel?      @relation(fields: [travelId], references: [id], onDelete: Cascade)
  travelId      String?      @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model ContactInfo {
  id        String   @id @unique @default(uuid())
  phone     String?
  email     String?
  website   String?
  facebook  String?
  hotel     Hotel?   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId   String?  @unique
  travel    Travel?  @relation(fields: [travelId], references: [id], onDelete: Cascade)
  travelId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id            String       @id @unique @default(uuid())
  stars         String
  feedback      String?
  Hotel         Hotel?       @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  hotelId       String?
  Destination   Destination? @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId String?
  Travel        Travel?      @relation(fields: [travelId], references: [id], onDelete: Cascade)
  travelId      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}
